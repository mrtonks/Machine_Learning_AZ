print("hello world!")
setwd("D:/Git/Machine_Learning_AZ/Part 2 - Regression/Section 5 - Multiple Linear Regression")
dataset = read.csv('50_Startups.csv')
View(dataset)
View(dataset)
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
library(caTools) # Select library
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8) # (Dependen var, %)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(test_set)
View(training_set)
View(training_set)
View(dataset)
regressor = lm(formula = Profit ~ .,
data = training_set)
summary(regressor)
y_pred = predict(regressor, newdata = test_set)
y_pred
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = dataset)
summary(regressor)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend,
data = dataset)
summary(regressor)
# Multiple Linear Regression
# Data Preprocessing
# Importing the dataset
dataset = read.csv('50_Startups.csv')
# dataset = dataset[, 2:3]
# Encoding categorical data
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
# Splitting the dataset into the Training Set and Test Set
# install.packages('caTools')
library(caTools) # Select library
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8) # (Dependen var, %)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
regressor = lm(formula = Profit ~ .,
data = training_set)
# R&D Spend is the only cariable that causes a real impact on profit
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
# Automatic Backward Elimination
backwardElimination <- function(x, s1) {
numVars = length(x)
for (i in c(1:numVars)) {
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regression))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl) {
j= which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars -1
}
return(summary(regressor))
}
SL = 0.05
dataset = dataset[, c(1, 2, 3, 4, 5)]
backwardElimination(training_set, SL)
backwardElimination <- function(x, s1) {
numVars = length(x)
for (i in c(1:numVars)) {
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl) {
j= which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars -1
}
return(summary(regressor))
}
SL = 0.05
dataset = dataset[, c(1, 2, 3, 4, 5)]
backwardElimination(training_set, SL)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)) {
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl) {
j= which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars -1
}
return(summary(regressor))
}
SL = 0.05
dataset = dataset[, c(1, 2, 3, 4, 5)]
backwardElimination(training_set, SL)
